{"version":3,"sources":["Canvas.js","NavBelt.js","App.js","serviceWorker.js","index.js"],"names":["Canvas","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","drawing","draw","bind","assertThisInitialized","onMouseUp","onMouseDown","canvas","React","createRef","current","width","clientWidth","height","clientHeight","react_default","a","createElement","ref","className","onMouseMove","e","rect","getBoundingClientRect","console","log","style","x","clientX","left","y","clientY","top","setState","ctx","getContext","lineWidth","lineJoin","strokeStyle","color","beginPath","pos","getMousePosition","lineTo","stroke","Component","NavBelt","onGetColor","onClick","onClear","colortoset","document","querySelector","clearRect","getColor","target","getAttribute","App","src_Canvas_0","src_NavBelt_0","title","canvasColor","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e6a21b8d.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './Canvas.css';\n\nclass Canvas extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {drawing: false};\n    this.draw = this.draw.bind(this);\n    this.onMouseUp = this.onMouseUp.bind(this);\n    this.onMouseDown = this.onMouseDown.bind(this);\n    this.canvas = React.createRef();\n   \n   \n  }\n  componentDidMount(){\n    this.canvas.current.width = this.canvas.current.clientWidth;\n    this.canvas.current.height= this.canvas.current.clientHeight;\n  }\n  render() {\n    return (\n        <canvas ref={this.canvas} width=\"1800\" height=\"1000\"className=\"Canvas\"  onMouseMove={this.draw} onMouseDown={this.onMouseDown} onMouseUp={this.onMouseUp}></canvas>\n     \n    );\n  }\n  getMousePosition(e){\n    let rect = this.canvas.current.getBoundingClientRect();\n    console.log(this.canvas.current.style.width)\n    return {\n      x: e.clientX - rect.left,\n      y: e.clientY - rect.top\n    };\n  }\n  onMouseUp(){\n    this.setState({drawing: false});\n  }\n  onMouseDown(){\n    this.setState({drawing: true});\n    this.ctx = this.canvas.current.getContext(\"2d\");\n    this.ctx.lineWidth = 3;\n    this.ctx.lineJoin = \"round\";\n    this.ctx.strokeStyle = this.props.color;\n    //this.ctx.lineCap = \"round\";\n    this.ctx.beginPath();\n\n  }\n  draw(e){\n     let pos = this.getMousePosition(e);  \n     if (this.state.drawing === true){\n        this.ctx.lineTo(pos.x, pos.y);\n        this.ctx.stroke();\n   \n   \n     }\n\n  }\n\n  \n}\n\nexport default Canvas;\n","import React, { Component } from 'react';\nimport './NavBelt.css';\n\nclass NavBelt extends Component {\n  constructor(props){\n      super(props);\n      this.onGetColor = this.onGetColor.bind(this);\n  }\n  render() {\n    return (\n        <aside className=\"NavBelt\">\n            <button onClick={this.onClear}>Clear</button>\n            <ul>\n                <li><button colortoset='red' onClick={this.onGetColor}>RED</button></li>\n                <li><button colortoset='green' onClick={this.onGetColor}>GREEN</button></li>\n                <li><button colortoset='blue' onClick={this.onGetColor}>BLUE</button></li>\n                <li><button colortoset='yellow' onClick={this.onGetColor}>YELLOW</button></li>\n                <li><button colortoset='black' onClick={this.onGetColor}>BLACK</button></li>\n            </ul>\n        </aside>\n     \n    );\n  }\n  onClear(){\n      const canvas = document.querySelector('.Canvas');\n      canvas.getContext('2d').clearRect(0,0,canvas.width,canvas.height);\n  }\n  onGetColor(e){\n        this.props.getColor(e.target.getAttribute('colortoset'));\n     \n  }\n}\n\nexport default NavBelt;\n","import React, { Component } from 'react';\nimport './App.css';\n\n//components import\nimport Canvas from './Canvas';\nimport NavBelt from './NavBelt';\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.getColor = this.getColor.bind(this);\n    this.state = {color: \"red\"}\n  }\n  render() {\n    return (\n        <div className=\"App\">\n            <Canvas color={this.state.color}></Canvas>\n            <NavBelt getColor={this.getColor}/>\n        </div>\n     \n    );\n  }\n  componentDidMount(){\n    document.title = \"Paint in React - my first app\"\n  }\n  getColor(canvasColor){\n      this.setState({color: canvasColor})\n      console.log(this.state)\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}